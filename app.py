import os
import json
import uuid
import threading
import time
from datetime import datetime, timedelta
from flask import Flask, request, jsonify
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters

app = Flask(__name__)

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
TOKEN = os.environ.get('TOKEN')
SECRET_KEY = os.environ.get('SECRET_KEY')
PORT = int(os.environ.get('PORT', 5000))
# ========================

bot = Bot(token=TOKEN)
clients = {}
pending_commands = {}

# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
def create_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç", callback_data='screenshot')],
        [
            InlineKeyboardButton("üñº –§–æ—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω", callback_data='play_photo'),
            InlineKeyboardButton("üé• –í–∏–¥–µ–æ –Ω–∞ —ç–∫—Ä–∞–Ω", callback_data='play_video')
        ],
        [InlineKeyboardButton("‚ùå Alt+F4", callback_data='altf4')],
        [
            InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data='reboot'),
            InlineKeyboardButton("‚èπ –í—ã–∫–ª—é—á–∏—Ç—å", callback_data='shutdown')
        ]
    ])

@app.route('/heartbeat', methods=['POST'])
def heartbeat():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
    data = request.json
    if data.get('key') != SECRET_KEY:
        return jsonify({'status': 'unauthorized'}), 401
    
    client_id = data.get('ip', 'unknown')
    clients[client_id] = {
        'last_seen': datetime.now(),
        'ip': data.get('ip', ''),
        'status': 'online'
    }
    return jsonify({'status': 'ok'})

@app.route('/commands', methods=['GET'])
def get_commands():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    client_key = request.args.get('key')
    if client_key != SECRET_KEY:
        return jsonify([]), 401
    
    client_ip = request.headers.get('X-Forwarded-For', request.remote_addr).split(',')[0]
    commands = pending_commands.get(client_ip, [])
    pending_commands[client_ip] = []
    return jsonify(commands)

@app.route('/complete', methods=['POST'])
def complete_command():
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    data = request.json
    if data.get('key') != SECRET_KEY:
        return jsonify({'status': 'unauthorized'}), 401
    
    client_ip = request.headers.get('X-Forwarded-For', request.remote_addr).split(',')[0]
    command_id = data.get('command_id')
    
    if client_ip in pending_commands:
        pending_commands[client_ip] = [
            cmd for cmd in pending_commands[client_ip] 
            if cmd.get('id') != command_id
        ]
    
    return jsonify({'status': 'ok'})

async def send_menu(update: Update):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    await update.message.reply_text(
        "üîí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ—É—Ç–±—É–∫–æ–º\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_keyboard()
    )

async def button_handler(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    data = query.data
    
    try:
        client_id = next(iter(clients.keys()), None)
        
        if not client_id:
            await query.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            return
        
        if data == 'screenshot':
            command = {
                'id': str(uuid.uuid4()),
                'type': 'screenshot',
                'timestamp': datetime.now().isoformat()
            }
            pending_commands.setdefault(client_id, []).append(command)
            await query.message.reply_text("üì∏ –ó–∞–ø—Ä–æ—à–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç...")
        
        elif data in ('play_video', 'play_photo'):
            media_type = 'video' if data == 'play_video' else 'image'
            text = "üìπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª..." if media_type == 'video' else "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ..."
            await query.message.reply_text(text)
            context.user_data['awaiting_media'] = {'type': media_type, 'client': client_id}
        
        elif data == 'altf4':
            command = {
                'id': str(uuid.uuid4()),
                'type': 'altf4',
                'timestamp': datetime.now().isoformat()
            }
            pending_commands.setdefault(client_id, []).append(command)
            await query.message.reply_text("‚úÖ –ö–æ–º–∞–Ω–¥–∞ Alt+F4 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        elif data == 'reboot':
            command = {
                'id': str(uuid.uuid4()),
                'type': 'reboot',
                'timestamp': datetime.now().isoformat()
            }
            pending_commands.setdefault(client_id, []).append(command)
            await query.message.reply_text("üîÑ –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        elif data == 'shutdown':
            command = {
                'id': str(uuid.uuid4()),
                'type': 'shutdown',
                'timestamp': datetime.now().isoformat()
            }
            pending_commands.setdefault(client_id, []).append(command)
            await query.message.reply_text("‚èπ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    
    except Exception as e:
        await query.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def media_handler(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    media_info = context.user_data.get('awaiting_media')
    if not media_info:
        return
    
    client_id = media_info.get('client')
    media_type = media_info.get('type')
    
    try:
        file_id = None
        
        if media_type == 'image' and update.message.photo:
            file_id = update.message.photo[-1].file_id
        elif media_type == 'video' and update.message.video:
            file_id = update.message.video.file_id
        
        if file_id:
            file = await bot.get_file(file_id)
            command = {
                'id': str(uuid.uuid4()),
                'type': 'media',
                'media_type': media_type,
                'url': file.file_path,
                'timestamp': datetime.now().isoformat()
            }
            pending_commands.setdefault(client_id, []).append(command)
            await update.message.reply_text(f"‚úÖ {'–§–æ—Ç–æ' if media_type == 'image' else '–í–∏–¥–µ–æ'} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        
        del context.user_data['awaiting_media']
        await send_menu(update)
    
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {str(e)}")

async def start(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await send_menu(update)

def cleanup_clients():
    """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    while True:
        try:
            now = datetime.now()
            for client_id, client_data in list(clients.items()):
                if now - client_data['last_seen'] > timedelta(minutes=5):
                    del clients[client_id]
        except:
            pass
        time.sleep(300)

@app.route('/')
def home():
    return "PC Control Bot is running!"

async def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO, media_handler))
    
    await application.run_polling()

def start_bot():
    import asyncio
    asyncio.run(run_bot())

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ
    threading.Thread(target=cleanup_clients, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=start_bot, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    from waitress import serve
    serve(app, host="0.0.0.0", port=PORT)
