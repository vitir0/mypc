import os
import json
import uuid
import threading
import time
from datetime import datetime, timedelta
from flask import Flask, request, jsonify
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters

app = Flask(__name__)

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
TOKEN = os.environ.get('TOKEN')  # –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
SECRET_KEY = os.environ.get('SECRET_KEY')  # –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
PORT = int(os.environ.get('PORT', 5000))
# ========================

bot = Bot(token=TOKEN)
clients = {}
pending_commands = {}

# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ)
KEYBOARD_LAYOUT = [
    [InlineKeyboardButton("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç", callback_data='screenshot')],
    [InlineKeyboardButton("üñº –§–æ—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω", callback_data='play_photo'),
     InlineKeyboardButton("üé• –í–∏–¥–µ–æ –Ω–∞ —ç–∫—Ä–∞–Ω", callback_data='play_video')],
    [InlineKeyboardButton("‚ùå Alt+F4", callback_data='altf4')],
    [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data='reboot'),
     InlineKeyboardButton("‚èπ –í—ã–∫–ª—é—á–∏—Ç—å", callback_data='shutdown')]
]

@app.route('/heartbeat', methods=['POST'])
def heartbeat():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
    data = request.json
    if data.get('key') != SECRET_KEY:
        return jsonify({'status': 'unauthorized'}), 401
    
    client_id = data.get('ip', 'unknown')
    clients[client_id] = {
        'last_seen': datetime.now(),
        'ip': data.get('ip', ''),
        'status': 'online'
    }
    return jsonify({'status': 'ok'})

@app.route('/commands', methods=['GET'])
def get_commands():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    client_key = request.args.get('key')
    if client_key != SECRET_KEY:
        return jsonify([]), 401
    
    client_ip = request.remote_addr
    commands = pending_commands.get(client_ip, [])
    pending_commands[client_ip] = []
    return jsonify(commands)

@app.route('/complete', methods=['POST'])
def complete_command():
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    data = request.json
    if data.get('key') != SECRET_KEY:
        return jsonify({'status': 'unauthorized'}), 401
    
    client_ip = request.remote_addr
    command_id = data.get('command_id')
    
    if client_ip in pending_commands:
        pending_commands[client_ip] = [
            cmd for cmd in pending_commands[client_ip] 
            if cmd.get('id') != command_id
        ]
    
    return jsonify({'status': 'ok'})

def send_menu(chat_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    bot.send_message(
        chat_id=chat_id,
        text="üîí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ—É—Ç–±—É–∫–æ–º\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(KEYBOARD_LAYOUT)
    )

def button_handler(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    chat_id = query.message.chat_id
    
    try:
        client_id = next(iter(clients.keys()), None)
        
        if not client_id:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            return
        
        if data == 'screenshot':
            command = {
                'id': str(uuid.uuid4()),
                'type': 'screenshot',
                'timestamp': datetime.now().isoformat()
            }
            pending_commands.setdefault(client_id, []).append(command)
            bot.send_message(chat_id, "üì∏ –ó–∞–ø—Ä–æ—à–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç...")
        
        elif data in ('play_video', 'play_photo'):
            media_type = 'video' if data == 'play_video' else 'image'
            bot.send_message(chat_id, f"üìπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {'–≤–∏–¥–µ–æ' if media_type == 'video' else '—Ñ–æ—Ç–æ'} —Ñ–∞–π–ª...")
            context.user_data['awaiting_media'] = {'type': media_type, 'client': client_id}
        
        elif data == 'altf4':
            command = {
                'id': str(uuid.uuid4()),
                'type': 'altf4',
                'timestamp': datetime.now().isoformat()
            }
            pending_commands.setdefault(client_id, []).append(command)
            bot.send_message(chat_id, "‚úÖ –ö–æ–º–∞–Ω–¥–∞ Alt+F4 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        elif data == 'reboot':
            command = {
                'id': str(uuid.uuid4()),
                'type': 'reboot',
                'timestamp': datetime.now().isoformat()
            }
            pending_commands.setdefault(client_id, []).append(command)
            bot.send_message(chat_id, "üîÑ –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        elif data == 'shutdown':
            command = {
                'id': str(uuid.uuid4()),
                'type': 'shutdown',
                'timestamp': datetime.now().isoformat()
            }
            pending_commands.setdefault(client_id, []).append(command)
            bot.send_message(chat_id, "‚èπ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        bot.answer_callback_query(query.id)
    
    except Exception as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

def media_handler(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    media_info = context.user_data.get('awaiting_media')
    if not media_info:
        return
    
    chat_id = update.message.chat_id
    client_id = media_info.get('client')
    media_type = media_info.get('type')
    
    try:
        file_id = None
        
        if media_type == 'image' and update.message.photo:
            file_id = update.message.photo[-1].file_id
        elif media_type == 'video' and update.message.video:
            file_id = update.message.video.file_id
        
        if file_id:
            file = bot.get_file(file_id)
            command = {
                'id': str(uuid.uuid4()),
                'type': 'media',
                'media_type': media_type,
                'url': file.file_path,
                'timestamp': datetime.now().isoformat()
            }
            pending_commands.setdefault(client_id, []).append(command)
            bot.send_message(chat_id, f"‚úÖ {'–§–æ—Ç–æ' if media_type == 'image' else '–í–∏–¥–µ–æ'} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        
        del context.user_data['awaiting_media']
        send_menu(chat_id)
    
    except Exception as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {str(e)}")

def start(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    send_menu(update.message.chat_id)

def cleanup_clients():
    """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    while True:
        try:
            now = datetime.now()
            for client_id, client_data in list(clients.items()):
                if now - client_data['last_seen'] > timedelta(minutes=5):
                    del clients[client_id]
        except:
            pass
        time.sleep(300)

@app.route('/')
def home():
    return "PC Control Bot is running!"

def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    updater = Updater(token=TOKEN, use_context=True)
    dp = updater.dispatcher
    
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CallbackQueryHandler(button_handler))
    dp.add_handler(MessageHandler(Filters.photo | Filters.video, media_handler))
    
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ
    threading.Thread(target=cleanup_clients, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_bot, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    app.run(host='0.0.0.0', port=PORT)
